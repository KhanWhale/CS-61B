Q: Is one GrowList implementation always better than the others?
A: Java GrowList is always the best.

Q: Why is the runtime for N insertions into a geometrically resizing list a Theta(N) operation?
A:  It takes theta (1) time to insert one element into a list, so theta (N) time for N elements.

Q: Why is the runtime for N insertions into a arithmetically resizing list a Theta(N^2) operation?
A: Need to parse entire list to find insertion point, and then theta(N) for actual insertion, resulting in Theta (N^2).

Q: How does the runtime per operation for the ArithGrowList compare to that of GeomGrowList and JavaGrowList? Specifically look at the non-accumulated plots and describe the trends for how long each operation takes as a function of how many elements have already been inserted in the list.
A: ArithGrowList is considerably worse, with a constantly increasing amortized time, and periodic spikes. The amortized time increases linearly with N; for the others, amortized time is relatively constant, with spikes of varying height.

Q: When are there spikes in the per operation runtime graphs for each of the implementations? Do these make sense to you? Hint: some of these should and others might not. Empirical runtime can be quite messy and depends on machine specifics which will be revealed in other subsequent classes like CS61C.
A: The spikes occur on array expansion, as this takes an extra amount of time.

Q: Optional: Try changing the code for GeomGrowList to resize by a different factor. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A:

Q: Optional: Try changing the code for ArithGrowList to resize by adding a different fixed number of spots in the array. How does this effect the theoretical asymptotic runtime? How does this effect the plotted runtime?
A: