Q: Is one sorting algorithm always faster than another?
A: Not necessarily; depending on the size of the input, the fastest/slowest algorithm varies.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Theta notation simply says that the algorithm is bounded above and below by functions in the N^2 family. However, there can be constant variations in time which are still bounded by Big Theta notation.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: Asymptotical bounds are extremely general–they do not tell us the exact amount of time taken for a given input or on a given system, which empirical bounds do tell us.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No. In fact, for some algorithms, e.g. BubbleSorter, WipingBubbleSorter, the graphs are ridged–there will be a drop and then subsequent increase in runtime.

Q: How does changing nrepeats change the plot?
A: Nrepeats affects averaging–higher nrepeats smooths out the plot, giving more reliable data, while decreasing it reduces the number of data points, decreasing confidence.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No–these are runtimes specific to the machine/computer/compiler they are being run on, and thus will differ even if arguments are the same.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: